/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include "tema1.hpp"

bool_t
xdr_SensorData (XDR *xdrs, SensorData *objp)
{
	register int32_t *buf;

	 if (!xdr_int (xdrs, &objp->dataId))
		 return FALSE;
	 if (!xdr_int (xdrs, &objp->noValues))
		 return FALSE;
	 if (!xdr_array (xdrs, (char **)&objp->values.values_val, (u_int *) &objp->values.values_len, ~0,
		sizeof (float), (xdrproc_t) xdr_float))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_input_login (XDR *xdrs, input_login *objp)
{
	register int32_t *buf;

	 if (!xdr_string (xdrs, &objp->name, ~0))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_input_key (XDR *xdrs, input_key *objp)
{
	register int32_t *buf;

	 if (!xdr_u_long (xdrs, &objp->session_key))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_input_id (XDR *xdrs, input_id *objp)
{
	register int32_t *buf;

	 if (!xdr_int (xdrs, &objp->id))
		 return FALSE;
	 if (!xdr_u_long (xdrs, &objp->session_key))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_input_load (XDR *xdrs, input_load *objp)
{
	register int32_t *buf;

	 if (!xdr_u_long (xdrs, &objp->session_key))
		 return FALSE;
	 if (!xdr_array (xdrs, (char **)&objp->data.data_val, (u_int *) &objp->data.data_len, ~0,
		sizeof (SensorData), (xdrproc_t) xdr_SensorData))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_input_add (XDR *xdrs, input_add *objp)
{
	register int32_t *buf;

	 if (!xdr_u_long (xdrs, &objp->session_key))
		 return FALSE;
	 if (!xdr_SensorData (xdrs, &objp->data))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_output_getstat (XDR *xdrs, output_getstat *objp)
{
	register int32_t *buf;

	 if (!xdr_float (xdrs, &objp->min))
		 return FALSE;
	 if (!xdr_float (xdrs, &objp->max))
		 return FALSE;
	 if (!xdr_float (xdrs, &objp->average))
		 return FALSE;
	 if (!xdr_float (xdrs, &objp->median))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_output_getstat_all (XDR *xdrs, output_getstat_all *objp)
{
	register int32_t *buf;

	 if (!xdr_int (xdrs, &objp->res))
		 return FALSE;
	 if (!xdr_array (xdrs, (char **)&objp->stats.stats_val, (u_int *) &objp->stats.stats_len, ~0,
		sizeof (output_getstat), (xdrproc_t) xdr_output_getstat))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_output_store (XDR *xdrs, output_store *objp)
{
	register int32_t *buf;

	 if (!xdr_int (xdrs, &objp->error))
		 return FALSE;
	 if (!xdr_array (xdrs, (char **)&objp->data.data_val, (u_int *) &objp->data.data_len, ~0,
		sizeof (SensorData), (xdrproc_t) xdr_SensorData))
		 return FALSE;
	return TRUE;
}
