/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "tema1.hpp"
#include <iostream>
#include <string.h>
#include <fstream>
#include <iterator>
#include <algorithm>
#include <sstream>

using namespace std;

struct input {
	char *command;
};
typedef struct input input;

void
tema1_prog_1(char *host)
{
	CLIENT *clnt;
	int  *result_1;

#ifndef	DEBUG
	clnt = clnt_create (host, TEMA1_PROG, TEMA1_VERS, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */

	while(1) {
		string command;
		cin>>command;

		input* client_request = (input*) malloc (sizeof(input));
		client_request->command = (char *) malloc((strlen(command.c_str())+1)*sizeof(char));
        strcpy(client_request->command, command.c_str());

		cout<<strcmp(client_request->command, "LOAD")<<endl;

        if (strcmp(client_request->command, "exit") == 0) {
            printf("Now exiting...\n");
            break;
        }

		if (strcmp(client_request->command, "LOAD") == 0) {
			SensorData *load_1_arg;
			fstream newfile;
			newfile.open("client_test.rpcdb",ios::in);
			if (newfile.is_open()){
				unsigned line_count = std::count(std::istreambuf_iterator<char>(newfile), std::istreambuf_iterator<char>(), '\n');

				newfile.seekg(0, std::ios::beg);
				
				load_1_arg = (SensorData *) malloc((line_count+1)*sizeof(SensorData));
				int i = 0;
				string line;

				while(getline(newfile, line)){
					cout<<line<<endl;
					std::stringstream test(line);
					std::string segment;

					std::getline(test, segment, ' ');
					load_1_arg[i].dataId = stoi(segment);
					std::getline(test, segment, ' ');
					load_1_arg[i].noValues = stoi(segment);
					std::getline(test, segment, ' ');
					load_1_arg[i].values = (float *) malloc(load_1_arg[i].noValues * sizeof(float));
					for (int j = 0; j < load_1_arg[i].noValues; j++) {
						load_1_arg[i].values[j] = std::stof(segment);
					}
					
					i++;
				}
				newfile.close();
			}

			result_1 = load_1(load_1_arg, clnt);
			if (result_1 == (int *) NULL) {
				clnt_perror (clnt, "call failed");
			}
		}
	}
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}


int
main (int argc, char *argv[])
{
	char *host;

	if (argc < 2) {
		printf ("usage: %s server_host\n", argv[0]);
		exit (1);
	}
	host = argv[1];
	tema1_prog_1 (host);
exit (0);
}
